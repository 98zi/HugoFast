{"version":3,"file":"js/233.d8ef8da5.js","mappings":"wKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,UAAU,CAACF,EAAG,SAASA,EAAG,MAAM,CAACE,YAAY,mBAAmB,CAACF,EAAG,aAAaA,EAAG,SAAS,CAACA,EAAG,SAAS,CAACG,MAAM,CAAC,KAAO,KAAK,CAACH,EAAG,WAAW,CAACG,MAAM,CAAC,YAAc,SAASC,MAAM,CAACC,MAAOP,EAAIQ,SAAa,KAAEC,SAAS,SAAUC,GAAMV,EAAIW,KAAKX,EAAIQ,SAAU,OAAQE,EAAI,EAAEE,WAAW,oBAAoB,GAAGV,EAAG,SAAS,CAACG,MAAM,CAAC,KAAO,KAAK,CAACL,EAAIa,GAAGb,EAAIc,GAAGd,EAAIQ,SAASO,UAAU,GAAGb,EAAG,SAAS,CAACA,EAAG,SAAS,CAACG,MAAM,CAAC,KAAO,KAAK,CAACL,EAAIa,GAAGb,EAAIc,GAAGd,EAAIQ,SAASQ,WAAW,GAAGd,EAAG,IAAI,CAACF,EAAIa,GAAGb,EAAIc,GAAGd,EAAIiB,mBAAmB,IAAI,EACvlB,EACIC,EAAkB,G,8BCoBtB,GACEC,KAAM,WACNC,WAAY,CACVC,MAAK,IACLC,UAAS,KAEXC,OACE,MAAO,CACLC,GAAI,GACJC,gBAAiB,GACjBjB,SAAU,KAEd,EACAkB,QAAS,CACPC,mBACEC,EAAA,MAEI,yEAA2E3B,KAAKuB,IACjFK,MAAMC,IACL7B,KAAKwB,gBAAkBK,EAASP,IAAI,IAErCQ,OAAOC,IACNC,QAAQD,MAAMA,EAAM,GAE1B,GAEFE,SAAU,CACRC,oBACE,MAAMC,EAAgBnC,KAAKwB,gBAAgBY,QAAQ,OAAS,EACtDC,EAAcrC,KAAKwB,gBAAgBY,QAAQ,MAAOD,GAClDG,EAAiBtC,KAAKwB,gBACzBe,UAAUJ,EAAeE,GACzBG,OAEGC,EAAiB,CAAC,EAClBC,EAAgBJ,EAAeK,MAAM,MAC3C,IAAK,MAAMC,KAAQF,EAAe,CAChC,MAAOG,EAAKvC,GAASsC,EAAKD,MAAM,KAAKG,KAAKC,GAAQA,EAAIP,SAClDK,GAAOvC,IACLA,EAAM0C,WAAW,MAAQ1C,EAAM2C,SAAS,KAC1CR,EAAeI,GAAOvC,EACnBiC,UAAU,EAAGjC,EAAM4C,OAAS,GAC5BP,MAAM,KACNG,KAAKK,GAAQA,EAAIX,SAEpBC,EAAeI,GAAOvC,EAG5B,CAGA,OAFAN,KAAKO,SAAWkC,EAChBT,QAAQoB,IAAIpD,KAAKO,UACVkC,CACT,EACAzB,gBACE,MAAMqC,EACJrD,KAAKwB,gBAAgBY,QAAQ,MAAOpC,KAAKwB,gBAAgBY,QAAQ,OAAS,GAAK,EACjF,OAAOpC,KAAKwB,gBAAgBe,UAAUc,GAAWb,MACnD,GAEFc,UACE,MAAM/B,EAAKvB,KAAKuD,OAAOC,MAAMtC,KAC7BlB,KAAKuB,GAAKA,EAEVvB,KAAKyD,YACP,GCtFmI,I,UCOjIC,GAAY,OACd,EACA5D,EACAmB,GACA,EACA,KACA,KACA,MAIF,EAAeyC,EAAiB,O","sources":["webpack://vue-admin-hugo/./src/views/EditView.vue?0561","webpack://vue-admin-hugo/src/views/EditView.vue","webpack://vue-admin-hugo/./src/views/EditView.vue?3f7e","webpack://vue-admin-hugo/./src/views/EditView.vue"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"layout\"},[_c('Aside'),_c('div',{staticClass:\"container about\"},[_c('TopHeader'),_c('el-row',[_c('el-col',{attrs:{\"span\":12}},[_c('el-input',{attrs:{\"placeholder\":\"请输入内容\"},model:{value:(_vm.metaData.date),callback:function ($$v) {_vm.$set(_vm.metaData, \"date\", $$v)},expression:\"metaData.date\"}})],1),_c('el-col',{attrs:{\"span\":12}},[_vm._v(_vm._s(_vm.metaData.slug))])],1),_c('el-row',[_c('el-col',{attrs:{\"span\":12}},[_vm._v(_vm._s(_vm.metaData.title))])],1),_c('p',[_vm._v(_vm._s(_vm.extractedText))])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"layout\">\r\n    <Aside />\r\n    <div class=\"container about\">\r\n      <TopHeader />\r\n      <el-row>\r\n        <el-col :span=\"12\"><el-input v-model=\"metaData.date\" placeholder=\"请输入内容\"></el-input></el-col>\r\n        <el-col :span=\"12\">{{ metaData.slug }}</el-col>\r\n      </el-row>\r\n      <el-row>\r\n        <el-col :span=\"12\">{{ metaData.title }}</el-col>\r\n      </el-row>\r\n      <p>{{ extractedText }}</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Aside from \"@/components/Aside.vue\";\r\nimport TopHeader from \"@/components/TopHeader.vue\";\r\n\r\nimport axios from \"axios\";\r\nexport default {\r\n  name: \"EditView\",\r\n  components: {\r\n    Aside,\r\n    TopHeader,\r\n  },\r\n  data() {\r\n    return {\r\n      id: \"\",\r\n      markdownContent: \"\",\r\n      metaData: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async getDetails() {\r\n      axios\r\n        .get(\r\n          \"https://raw.githubusercontent.com/lovezsh/hugo-blog/main/content/blog/\" + this.id)\r\n        .then((response) => {\r\n          this.markdownContent = response.data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n        });\r\n    },\r\n  },\r\n  computed: {\r\n    extractedMetadata() {\r\n      const metadataStart = this.markdownContent.indexOf(\"---\") + 3;\r\n      const metadataEnd = this.markdownContent.indexOf(\"---\", metadataStart);\r\n      const metadataString = this.markdownContent\r\n        .substring(metadataStart, metadataEnd)\r\n        .trim();\r\n\r\n      const metadataObject = {};\r\n      const metadataLines = metadataString.split(\"\\n\");\r\n      for (const line of metadataLines) {\r\n        const [key, value] = line.split(\":\").map((str) => str.trim());\r\n        if (key && value) {\r\n          if (value.startsWith(\"[\") && value.endsWith(\"]\")) {\r\n            metadataObject[key] = value\r\n              .substring(1, value.length - 1)\r\n              .split(\",\")\r\n              .map((tag) => tag.trim());\r\n          } else {\r\n            metadataObject[key] = value;\r\n          }\r\n        }\r\n      }\r\n      this.metaData = metadataObject;\r\n      console.log(this.metaData);\r\n      return metadataObject;\r\n    },\r\n    extractedText() {\r\n      const textStart =\r\n        this.markdownContent.indexOf(\"---\", this.markdownContent.indexOf(\"---\") + 3) + 3;\r\n      return this.markdownContent.substring(textStart).trim();\r\n    },\r\n  },\r\n  mounted() {\r\n    const id = this.$route.query.name;\r\n    this.id = id;\r\n\r\n    this.getDetails();\r\n  },\r\n};\r\n</script>\r\n","import mod from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./EditView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./EditView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./EditView.vue?vue&type=template&id=0af8c7b8&\"\nimport script from \"./EditView.vue?vue&type=script&lang=js&\"\nexport * from \"./EditView.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","attrs","model","value","metaData","callback","$$v","$set","expression","_v","_s","slug","title","extractedText","staticRenderFns","name","components","Aside","TopHeader","data","id","markdownContent","methods","async","axios","then","response","catch","error","console","computed","extractedMetadata","metadataStart","indexOf","metadataEnd","metadataString","substring","trim","metadataObject","metadataLines","split","line","key","map","str","startsWith","endsWith","length","tag","log","textStart","mounted","$route","query","getDetails","component"],"sourceRoot":""}